diff --git a/src/builtins/builtins-array.cc b/src/builtins/builtins-array.cc
index b5adcfa745e..daf0136893a 100644
--- a/src/builtins/builtins-array.cc
+++ b/src/builtins/builtins-array.cc
@@ -263,6 +263,26 @@ V8_WARN_UNUSED_RESULT Maybe<bool> TryFastArrayFill(
 }
 }  // namespace
 
+// Making arrays smaller should improve memory optimization right?
+BUILTIN(ArrayShorten)
+{
+	HandleScope scope(isolate);
+	Factory* factory = isolate->factory();
+	Handle<Object> reciever = args.reciever();
+	
+	if (!IsJSArray(*reciever))
+	{
+		THROW_NEW_ERROR_RETURN_FAILURE(isolate, NewTypeError(MessageTemplate:kPlaceholderOnly, factory->NewStringFromAsciiChecked("Object not array");
+	}
+
+	Handle<JSArray> array = Cast<JSArray>(reciever);
+	int len = Smi::ToInt(array->length());
+	len--;
+	array->set_length(Smi::FromInt(len));
+	
+	return ReadOnlyRoots(isolate).undefined_value();
+}
+
 BUILTIN(ArrayPrototypeFill) {
   HandleScope scope(isolate);
 
diff --git a/src/builtins/builtins-definitions.h b/src/builtins/builtins-definitions.h
index c43f367a553..11e830bf215 100644
--- a/src/builtins/builtins-definitions.h
+++ b/src/builtins/builtins-definitions.h
@@ -403,6 +403,7 @@ namespace internal {
   TFC(ArraySingleArgumentConstructor_HoleyDouble_DisableAllocationSites,       \
       ArraySingleArgumentConstructor)                                          \
   TFC(ArrayNArgumentsConstructor, ArrayNArgumentsConstructor)                  \
+  CPP(ArrayShorten)							       \
   CPP(ArrayConcat)                                                             \
   /* ES6 #sec-array.prototype.fill */                                          \
   CPP(ArrayPrototypeFill)                                                      \
diff --git a/src/d8/d8.cc b/src/d8/d8.cc
index 76b54329579..f35b721fd88 100644
--- a/src/d8/d8.cc
+++ b/src/d8/d8.cc
@@ -3698,43 +3698,43 @@ Local<ObjectTemplate> Shell::CreateGlobalTemplate(Isolate* isolate) {
   global_template->Set(isolate, "version",
                        FunctionTemplate::New(isolate, Version));
 
-  global_template->Set(isolate, "print", FunctionTemplate::New(isolate, Print));
-  global_template->Set(isolate, "printErr",
-                       FunctionTemplate::New(isolate, PrintErr));
-  global_template->Set(isolate, "write",
-                       FunctionTemplate::New(isolate, WriteStdout));
+  //global_template->Set(isolate, "print", FunctionTemplate::New(isolate, Print));
+  //global_template->Set(isolate, "printErr",
+  //                     FunctionTemplate::New(isolate, PrintErr));
+  //global_template->Set(isolate, "write",
+  //                     FunctionTemplate::New(isolate, WriteStdout));
   if (!i::v8_flags.fuzzing) {
-    global_template->Set(isolate, "writeFile",
+    //global_template->Set(isolate, "writeFile",
                          FunctionTemplate::New(isolate, WriteFile));
   }
-  global_template->Set(isolate, "read",
-                       FunctionTemplate::New(isolate, ReadFile));
-  global_template->Set(isolate, "readbuffer",
-                       FunctionTemplate::New(isolate, ReadBuffer));
-  global_template->Set(isolate, "readline",
-                       FunctionTemplate::New(isolate, ReadLine));
-  global_template->Set(isolate, "load",
-                       FunctionTemplate::New(isolate, ExecuteFile));
-  global_template->Set(isolate, "setTimeout",
-                       FunctionTemplate::New(isolate, SetTimeout));
+  //global_template->Set(isolate, "read",
+  //                     FunctionTemplate::New(isolate, ReadFile));
+  //global_template->Set(isolate, "readbuffer",
+  //                     FunctionTemplate::New(isolate, ReadBuffer));
+  //global_template->Set(isolate, "readline",
+  //                     FunctionTemplate::New(isolate, ReadLine));
+  //global_template->Set(isolate, "load",
+  //                     FunctionTemplate::New(isolate, ExecuteFile));
+  //global_template->Set(isolate, "setTimeout",
+  //                     FunctionTemplate::New(isolate, SetTimeout));
   // Some Emscripten-generated code tries to call 'quit', which in turn would
   // call C's exit(). This would lead to memory leaks, because there is no way
   // we can terminate cleanly then, so we need a way to hide 'quit'.
   if (!options.omit_quit) {
-    global_template->Set(isolate, "quit", FunctionTemplate::New(isolate, Quit));
+    //global_template->Set(isolate, "quit", FunctionTemplate::New(isolate, Quit));
   }
-  global_template->Set(isolate, "testRunner",
-                       Shell::CreateTestRunnerTemplate(isolate));
-  global_template->Set(isolate, "Realm", Shell::CreateRealmTemplate(isolate));
-  global_template->Set(isolate, "performance",
-                       Shell::CreatePerformanceTemplate(isolate));
-  global_template->Set(isolate, "Worker", Shell::CreateWorkerTemplate(isolate));
+  //global_template->Set(isolate, "testRunner",
+  //                     Shell::CreateTestRunnerTemplate(isolate));
+  //global_template->Set(isolate, "Realm", Shell::CreateRealmTemplate(isolate));
+  //global_template->Set(isolate, "performance",
+  //                     Shell::CreatePerformanceTemplate(isolate));
+  //global_template->Set(isolate, "Worker", Shell::CreateWorkerTemplate(isolate));
 
   // Prevent fuzzers from creating side effects.
   if (!i::v8_flags.fuzzing) {
-    global_template->Set(isolate, "os", Shell::CreateOSTemplate(isolate));
+    //global_template->Set(isolate, "os", Shell::CreateOSTemplate(isolate));
   }
-  global_template->Set(isolate, "d8", Shell::CreateD8Template(isolate));
+  //global_template->Set(isolate, "d8", Shell::CreateD8Template(isolate));
 
   if (i::v8_flags.expose_async_hooks) {
     global_template->Set(isolate, "async_hooks",
diff --git a/src/init/bootstrapper.cc b/src/init/bootstrapper.cc
index 5d8c5636415..ce733f2bfeb 100644
--- a/src/init/bootstrapper.cc
+++ b/src/init/bootstrapper.cc
@@ -2549,6 +2549,7 @@ void Genesis::InitializeGlobal(Handle<JSGlobalObject> global_object,
     JSObject::AddProperty(isolate_, proto, factory->constructor_string(),
                           array_function, DONT_ENUM);
 
+    SimpleInstallFunction(isolate_, proto, "optimize", Builtin::kArrayShorten, 1, true);
     SimpleInstallFunction(isolate_, proto, "at", Builtin::kArrayPrototypeAt, 1,
                           true);
     SimpleInstallFunction(isolate_, proto, "concat",
